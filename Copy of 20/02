{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NoS549KwB_qQRp0nfDTbunJT9HfDi_H3","timestamp":1740034000935}],"authorship_tag":"ABX9TyP0QEpkcCL0BTY7Ec+K6YKo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":28,"metadata":{"id":"LQsUPtIQtck8","executionInfo":{"status":"ok","timestamp":1740032065290,"user_tz":-330,"elapsed":16,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}}},"outputs":[],"source":["# Numpy - Numeric python\n","# Most powerful package - Library\n","# Numpy- Dimensions\n","# A- One Dimensional Array\n","# [A,B] [] [A\n","#           B ]- Two Dimensional Array - Row [] Column\n","\n","# Three Dimensional\n","# Array - Storing, Manipulating, Similar Data type\n","# Faster than any mathematical functions\n","# Convenient compared to other packages\n","# Memory efficiency\n","# Support multi dimensional arrays\n","# speed(Numpy operation) > speed (Lists operations)\n","# size(Numpy operation) < size (Lists operations)\n","# Memory Optimization(Numpy) > Memory Optimization (List operations)"]},{"cell_type":"code","source":["# Install numpy - pip3 install numpy// pip install numpy"],"metadata":{"id":"7Eyb4jWyv2VX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"HLh5jVAWwAyM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a numpy array\n","# 1D array\n","arr1D = np.array([1,2,3,4,5])\n","print(arr1D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ii2bHnmFwD9E","executionInfo":{"status":"ok","timestamp":1740028174186,"user_tz":-330,"elapsed":51,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"edfc98a8-7a4d-4c46-a772-cbe1305c415f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5]\n"]}]},{"cell_type":"code","source":["# Creating 2D array - Matrix\n","arr2D = np.array([\n","    [1,2,3],[4,5,6]\n","])\n","print(arr2D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6J7HTmtpwy21","executionInfo":{"status":"ok","timestamp":1740028772748,"user_tz":-330,"elapsed":47,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"00eb1d35-602b-42b2-85ed-89b99faf7216"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [4 5 6]]\n"]}]},{"cell_type":"code","source":["# Creating arrays with default values\n","# Creating matrix with all values of elements as '0'\n","allZeros = np.zeros((2,3))\n","print(allZeros)\n","\n","# Creating Matrix with all values os elements as '1'\n","allOnes = np.ones((2,3))\n","print(allOnes)\n","\n","# Creating matrix with all values of elements as 'Constant value - n ~  Full value'\n","allConstant = np.full((2,3),6)\n","print(allConstant)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UEffd4qWzCm9","executionInfo":{"status":"ok","timestamp":1740029359978,"user_tz":-330,"elapsed":14,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"c9b4ed3a-b8f1-44d1-8e2a-02e52e40f943"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0.]\n"," [0. 0. 0.]]\n","[[1. 1. 1.]\n"," [1. 1. 1.]]\n","[[6 6 6]\n"," [6 6 6]]\n"]}]},{"cell_type":"code","source":["# Create an identity matrix - I - Square matrix\n","identity = np.eye(4)\n","print(identity)\n","\n","\n","# Identity Matrix - Aii = 1 && Aij = 0\n","# For all A Belongs to R M×N\n","# Aij -"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"imCyWUKI01C7","executionInfo":{"status":"ok","timestamp":1740029915265,"user_tz":-330,"elapsed":14,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"71b7d5ab-934e-4bab-861f-bc34bc3ec880"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 0. 0. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 0. 0. 1.]]\n"]}]},{"cell_type":"code","source":["# Creating random Matrices\n","\n","# with 0 and 1\n","rand1 = np.random.rand(3,3)\n","print(rand1)\n","\n","# between a and b\n","rand2 = np.random.randint(10,20,(3,3))\n","print(rand2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErHZJhoR3l9I","executionInfo":{"status":"ok","timestamp":1740030231989,"user_tz":-330,"elapsed":27,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"0a466e6a-3e0e-4370-ad8b-77c31e15e1fe"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.08527374 0.94374411 0.55113006]\n"," [0.29565983 0.0567462  0.45374432]\n"," [0.17026317 0.98136223 0.37118836]]\n","[[19 16 13]\n"," [15 11 18]\n"," [12 13 12]]\n"]}]},{"cell_type":"code","source":["# Array Properties\n","\n","arr= np.array([1,2,3,4,])\n","print(arr)\n","\n","# Shape or array\n","print(f'\\nThe shape of the array is {arr.shape}')\n","\n","# Size of array\n","print(f'The size of the array is {arr.size}')\n","\n","# Datatype of array\n","print(f'The Data type of the array is {arr.dtype}')\n","\n","# Dimensions of array\n","print(f'The Dimensions of the array is {arr.ndim}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zbGFb2gG4p4r","executionInfo":{"status":"ok","timestamp":1740030881438,"user_tz":-330,"elapsed":10,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"8a330b3a-6780-427a-e832-08863ef24c62"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4]\n","\n","The shape of the array is (4,)\n","The size of the array is 4\n","The Data type of the array is int64\n","The Dimensions of the array is 1\n"]}]},{"cell_type":"code","source":["# Indexing and Slicing\n","# Access the elements in 1D Array\n","arr = np.array([1,2,3,4])\n","print(arr)\n","print(arr[3])\n","\n","# Slicing the elements\n","print(arr[0:3])\n","\n","# Access the elements in 2D Array\n","arr2 = np.array([[1,2,3],[2,3,4]])\n","print(arr2)\n","print(arr2[1,1])\n","print(arr2[0,:]) # first row with all columns\n","print(arr2[:,0]) # first column with all rows"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SEsCxV6Y7qKk","executionInfo":{"status":"ok","timestamp":1740031646372,"user_tz":-330,"elapsed":48,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"16b01aa9-854d-43ac-af02-cae3e513e8f5"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4]\n","4\n","[1 2 3]\n","[[1 2 3]\n"," [2 3 4]]\n","3\n","[1 2 3]\n","[1 2]\n"]}]},{"cell_type":"code","source":["# l1 = []\n","# [l1.append(_) for _ in range(10)]\n","\n","l1 = np.arange(10,-10,-2)\n","print(l1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQbPNSLsAkit","executionInfo":{"status":"ok","timestamp":1740032652985,"user_tz":-330,"elapsed":18,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"8a4f4de4-fb8b-4344-b8df-fbaf9120fe0e"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["[10  8  6  4  2  0 -2 -4 -6 -8]\n"]}]},{"cell_type":"code","source":["# Mathematical operations\n","a = np.array([1,2,3])\n","b = np.array([3,4,5])\n","print(f'The sum of a and b is {a + b}')\n","print(f'The diff of a and b is {a - b}')\n","print(f'The product of a and b is {a * b}')\n","print(f'The division of a and b is {a / b}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-jiH5b3pB6R1","executionInfo":{"status":"ok","timestamp":1740033175809,"user_tz":-330,"elapsed":28,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"89fc5f27-a4e5-4097-a29a-59fe49a5ef8c"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["The sum of a and b is [4 6 8]\n","The diff of a and b is [-2 -2 -2]\n","The product of a and b is [ 3  8 15]\n","The division of a and b is [0.33333333 0.5        0.6       ]\n"]}]},{"cell_type":"code","source":["# Matrix multiplication\n","b1 = np.array([[1,2,3],[2,3,4]])\n","b2 = np.array([[5,6],[7,8],[1,3]])\n","\n","# Dot product --- product = AB -- A m × n -- B n × p\n","c = np.dot(b1,b2)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UdgYmOfzC1fa","executionInfo":{"status":"ok","timestamp":1740033389931,"user_tz":-330,"elapsed":20,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"61f40abf-b032-48ef-b5da-278b502d0d81"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["[[22 31]\n"," [35 48]]\n"]}]},{"cell_type":"code","source":["print(b1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sodYWEhsERjP","executionInfo":{"status":"ok","timestamp":1740033421827,"user_tz":-330,"elapsed":11,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"d5063eb9-ca9b-4906-ec15-e5c8a7cc926b"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [2 3 4]]\n"]}]},{"cell_type":"code","source":["print(b2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CwUvnkdQEv_2","executionInfo":{"status":"ok","timestamp":1740033433811,"user_tz":-330,"elapsed":66,"user":{"displayName":"Marykrupa Bikki","userId":"08583643574564358693"}},"outputId":"c0d028f5-f755-48cd-e4ea-7a9ef8043eab"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["[[5 6]\n"," [7 8]\n"," [1 3]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tKUUny5wEy1-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TD-2J6eHG55u"},"execution_count":null,"outputs":[]}]}